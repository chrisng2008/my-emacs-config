#+TITLE: README
#+AUTHOR: Chris Ng
#+DATE: 2025.5.17
* Emacs配置
** Emacs换源
更换国内源可以避免国外源访问失败的问题
#+BEGIN_SRC Elisp:
(setq package-archives '(("gnu"    . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("nongnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                         ("melpa"  . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
(package-initialize) ;; You might already have this line
#+END_SRC

** Emacs 基础配置
#+BEGIN_SRC Elisp:
;; 开启行号
(global-display-line-numbers-mode 1) ; show the line number

(setq inhibit-startup-screen t) ; Inhibit the startup screen display

(setq tab-always-indent 'complete)

(setq electric-pair-mode t)

;;(toggle-frame-maximized)

; Edit the apperacne of Emacs
(tool-bar-mode -1)

(setq cursor-type '(bar . 5))
#+END_SRC

** 跨平台设置

*** Emacs跨平台案件统一方案
**** Windows改键
Windows需要使用SharpKeys来改键，保证和 ~Unix~ 统一

#+BEGIN_SRC Elisp:
;; Windows按键设置
(when (eq system-type 'windows-nt)
  ;; Windows 特定的键绑定
  (setq w32-apps-modifier 'super)       ; 通过SharpKeys改成了 Application
  (global-set-key (kbd "s-a") 'mark-whole-buffer) ;;对应Windows上面的Ctrl-a 全选
  (global-set-key (kbd "s-c") 'kill-ring-save) ;;对应Windows上面的Ctrl-c 复制
  (global-set-key (kbd "s-s") 'save-buffer) ;; 对应Windows上面的Ctrl-s 保存
  (global-set-key (kbd "s-v") 'yank) ;对应Windows上面的Ctrl-v 粘贴
  (global-set-key (kbd "s-z") 'undo) ;对应Windows上面的Ctrol-z 撤销
  (global-set-key (kbd "s-x") 'kill-region) ;对应Windows上面的Ctrol-x 剪切
  )
#+END_SRC

#+CAPTION: KeySharp改键配置
[[file:figure/sharpKeys.png]]

**** 跨平台字体配置
#+BEGIN_SRC Elisp:
(when (eq system-type 'darwin)
  (setq fonts '("Jetbrains Mono" "PingFang SC"))
  ;; 设置默认英文字体（JetbrainsMono NF Regular）
  (set-face-attribute 'default nil :font
                      (format "%s:pixelsize=%d" (car fonts) 16))
  (set-fontset-font t 'han (font-spec :family (cadr fonts)))
  ;; 添加emoji字体支持
  (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))

(when (eq system-type 'windows-nt)
  (setq fonts '("JetbrainsMono NF Regular"))
  (set-fontset-font t 'unicode "Segoe UI Emoji" nil 'prepend)
  (set-face-attribute 'default nil :font
                      (format "%s:pixelsize=%d" (car fonts) 24)))

(when (eq system-type 'gnu/linux)
  (setq fonts '("JetbrainsMono NF Regular"))
  (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend)
  (set-face-attribute 'default nil :font
                      (format "%s:pixelsize=%d" (car fonts) 24)))
#+END_SRC



